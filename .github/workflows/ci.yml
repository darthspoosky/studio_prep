
name: PrepTalk CI/CD Pipeline

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20.x'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint
      continue-on-error: true

    - name: Run TypeScript type checking
      run: npm run typecheck
      continue-on-error: true

    - name: Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Job 2: Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-group: [unit, integration, admin]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      if: matrix.test-group == 'unit'
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Run integration tests
      if: matrix.test-group == 'integration'
      run: npm run test
      env:
        CI: true

    - name: Run admin functionality tests
      if: matrix.test-group == 'admin'
      run: |
        # Start the development server in background
        npm run dev &
        DEV_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run admin tests
        node test_admin_functionality.mjs || true
        
        # Kill development server
        kill $DEV_PID
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-group }}
        path: |
          coverage/
          admin_test_results.json
          test-results.html

  # Job 3: Build & Validate
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Next.js application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Validate build output
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed: .next directory not found"
          exit 1
        fi
        echo "Build successful: .next directory exists"
        
    - name: Check build size
      run: |
        BUILD_SIZE=$(du -sh .next | cut -f1)
        echo "Build size: $BUILD_SIZE"
        echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: |
          .next/
          public/
        retention-days: 7

  # Job 4: Firebase Functions Build
  functions-build:
    name: Build Firebase Functions
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install functions dependencies
      run: |
        cd functions
        npm ci

    - name: Build Firebase Functions
      run: |
        cd functions
        npm run build
      env:
        CI: true

    - name: Upload functions build
      uses: actions/upload-artifact@v4
      with:
        name: functions-build
        path: functions/lib/

  # Job 5: Security & Performance Analysis
  analysis:
    name: Security & Performance Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output

    - name: Run bundle analyzer
      run: |
        npx @next/bundle-analyzer
      continue-on-error: true

    - name: Lighthouse CI
      run: |
        npm install -g @lhci/cli
        # Note: This would require a deployed URL for full testing
        echo "Lighthouse CI would run here with deployed URL"
      continue-on-error: true

  # Job 6: Deployment Preparation
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [build, functions-build, analysis]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Setup Firebase CLI
      run: |
        npm install -g firebase-tools

    - name: Validate Firebase configuration
      run: |
        firebase --version
        if [ -f "firebase.json" ]; then
          echo "Firebase configuration found"
          cat firebase.json
        else
          echo "Firebase configuration missing"
          exit 1
        fi

    - name: Validate Firestore rules
      run: |
        if [ -f "firestore.rules" ]; then
          echo "Firestore rules found"
          # firebase firestore:rules:validate firestore.rules
        else
          echo "Firestore rules missing"
          exit 1
        fi

    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r .next deployment-package/
        cp -r public deployment-package/
        cp -r functions/lib deployment-package/functions/
        cp firebase.json deployment-package/
        cp firestore.rules deployment-package/
        cp package.json deployment-package/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package/
        retention-days: 30

  # Job 7: Status Summary
  status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, functions-build, analysis]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "CI Pipeline Status Summary:"
        echo "=========================="
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Functions Build: ${{ needs.functions-build.result }}"
        echo "Analysis: ${{ needs.analysis.result }}"
        
        if [[ "${{ needs.code-quality.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
          echo "❌ CI Pipeline Failed"
          exit 1
        else
          echo "✅ CI Pipeline Successful"
        fi

    - name: Create status badge
      run: |
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "![Build Status](https://img.shields.io/badge/build-passing-brightgreen)" > build-status.md
        else
          echo "![Build Status](https://img.shields.io/badge/build-failing-red)" > build-status.md
        fi

    - name: Upload status artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ci-status
        path: build-status.md
